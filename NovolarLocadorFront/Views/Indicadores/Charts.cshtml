@model NovolarLocadorFront.ViewModel.ChartsViewModel;

<input type="hidden" id="locadorId" value="@Model.Proprietario.id_pessoa_pes" />
<div class="container-fluid">
    
</div>

<!-- Bar Chart -->
<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Relação Receitas x Despesas - Geral</h6>
        <div class="form-group">
            <label for="condominioComboBox">Selecione o ano para consulta:</label>
            <select id="anoRepassesComboBox" asp-items="ViewBag.anoRepassesComboBox" class="form-control" onchange="handleSelectChangeAnoRepasses()">
            </select>
        </div>
    </div>
    <div class="card-body">
        <div class="chart-bar">
            <canvas id="repassesChart" class="w-30" height="90"></canvas>
        </div>
    </div>
</div>



<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">Variação dos valores do aluguel</h6>
        <div class="form-group">
            <label for="imovelVariacaoAluguelComboBox">Selecione o imóvel para consulta:</label>
            <select id="imovelVariacaoAluguelComboBox" asp-items="ViewBag.imovelVariacaoAluguelComboBox" class="form-control">
                <option value="0">Selecione...</option>
            </select>
        </div>
        
            <button class="btn btn-primary" id="BtnConsultarContratos" onclick="handleOnClickBtnConsultarContratos()">Consultar</button>
        
    </div>
    <div class="card-body">
        <div class="chart-bar">
            <canvas id="variacaoAlugueisChart" class="w-60" height="95"></canvas>
        </div>
    </div>
</div>

    @section Scripts {

    <!-- Bootstrap core JavaScript-->
    <script src="vendor/jquery/jquery.min.js"></script>
    <script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <!-- Core plugin JavaScript-->
    <script src="vendor/jquery-easing/jquery.easing.min.js"></script>

    <!-- Custom scripts for all pages-->
    <script src="js/sb-admin-2.min.js"></script>

    <!-- Page level plugins -->
    <script src="vendor/chart.js/Chart.min.js"></script>

        <!--
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    -->

        <script>
            window.onload = function () {
                handleSelectChangeAnoRepasses();
            }
        </script>

        <script>
            let chartInstance;

            function handleSelectChangeAnoRepasses() {

                var select = document.getElementById('anoRepassesComboBox');
                var ano = select.value;

                if (ano <= 0) {
                    ano = @DateTime.Now.Year;
                }

                if (ano > 0) {
                    var url = '@Url.Action("RetornaCaixas", "indicadores")' + '/' + @Model.Proprietario.id_pessoa_pes + '/' + ano;
                    $.ajax(
                        {
                            url: url,
                            type: 'GET',
                            success: function (data) {
                                montaChartRepassesPorAno(data);
                            },
                            error: function (xhr, status, error) {
                                console.error(error);
                            }
                        });
                }
            }

            function montaChartRepassesPorAno(caixaMeses) {
                const ctx2 = document.getElementById('repassesChart').getContext('2d');

                if (chartInstance) {
                    chartInstance.destroy();
                }

                const meses = caixaMeses.meses; // Labels para o gráfico
                const valoresRepasses = caixaMeses.valoresRepasses; // Valores dos repasses
                const valoresDespesas = caixaMeses.valoresDespesas; // Valores das despesas (caso queira adicionar esse dado no gráfico)

                const DATA_COUNT = 5;
                const NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };
                const labels = meses;
                const data = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Receitas',
                            data: valoresRepasses,
                            borderColor: 'rgba(54, 162, 235, 1)',
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                        },
                        {
                            label: 'Despesas',
                            data: valoresDespesas,
                            borderColor: 'rgba(255, 99, 132, 1)',
                            backgroundColor: 'rgba(255, 99, 132, 0.5)',

                        }

                    ]
                };

                const config = {
                    type: 'bar',
                    data: data,
                    options: {
                        responsive: true,
                        plugins: {
                            tooltip: {
                                callbacks: {
                                    label: function (value) {
                                        console.log(value)
                                        
                                        return parseFloat(value.parsed.y).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                                    }
                                }
                            },
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Repasses por mês'
                            }
                        },
                        scales: {
                            y: {
                                ticks: {
                                    callback: function (value) {
                                        if (value != null && !isNaN(value)) {
                                            return parseFloat(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                                        }
                                        return ''; // Retorna string vazia se não for possível converter o valor
                                    }
                                }
                            }
                        }
                    }
                };

                chartInstance = new Chart(ctx2, config);
            }
        </script>


        <!-- Chart Linha - Variação alugueis -->
        <script>
            let lineChartInstance;

            function handleOnClickBtnConsultarContratos() {
                var imovel = document.getElementById('imovelVariacaoAluguelComboBox');

                if (imovel.value <= 0) {
                    alert("Selecione um imóvel para a consulta!");
                }
                else {
                    var url = '@Url.Action("consultar", "contratosaluguel")' + '/' + imovel.value;
                    console.log(url);
                    $.ajax(
                        {
                            url: url,
                            type: 'GET',
                            success: function (data) {
                                montaChartVariacoesContratoAluguel(data);
                            },
                            error: function (xhr, status, error) {
                                console.error(error);
                            }
                        });
                }

            }

            function montaChartVariacoesContratoAluguel(variacoes) {

                const ctx = document.getElementById('variacaoAlugueisChart').getContext('2d');

                if (lineChartInstance) {
                    lineChartInstance.destroy();
                }

                const data = {
                    labels : variacoes.anosComReajustes,
                    datasets: []
                };

                for (let i = 0; i < variacoes.dataSets.length; i++) {
                    //console.log('anos com reajuste:' + variacoes.anosComReajustes);
                    //console.log('cor de borda:' +  variacoes.dataSets[i].borderColor);
                    //console.log(variacoes.dataSets[i].tension);
                    //console.log('valores no array: ', variacoes.dataSets[i].data);    
                    data.datasets.push(variacoes.dataSets[i]);
                }

                const config = {
                    type: 'line',
                    data: data,
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Chart.js Line Chart'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function (value) {
                                        console.log(value)
                                        //if (value != null && !isNaN(value)) {
                                          //  return parseFloat(value.formattedValue).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                                        //}
                                        //return ''; // Retorna string vazia se não for possível converter o valor
                                        return `${value.dataset.label}: ` + parseFloat(value.parsed.y).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                                    }
                                }
                            }
                        },

                        scales:{
                            x: {
                                beginAtZero: false,
                                display: true
                                
                            },
                            y: {
                                beginAtZero: false,
                                display: true,
                                ticks: {
                                    callback: function (value) {
                                        if (value != null && !isNaN(value)) {
                                            return parseFloat(value).toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                                        }
                                        return ''; // Retorna string vazia se não for possível converter o valor
                                    }
                                }
                           }
                        }
                    },
                };

                lineChartInstance = new Chart(ctx, config);
            }

        </script>
    }
